<license>
#ifndef <CLASS.NAME>_H_
#define <CLASS.NAME>_H_

<base_class>#include "<base_class>.h"</base_class>

<type name="string">#include <string></type>
<operator name="output_stream">#include <ostream></operator>
<operator name="input_stream">#include <istream></operator>

class <class.name>{

public:
    <class.name>();
    virtual ~<class.name>();

    <operator name="equals">bool operator==();</operator>
    <operator name="notEquals">bool operator!=();</operator>

    <base_class.definition_template>
    <base_class.definition_template>
    </base_class.definition_template>

    <member_variable>void <member_variable>(){ return <member_variable>; }</member_variable>
    <member_variable><type> set<PrivateMember>(<type> val){ <member_variable> = val; }</member_variable>

private:
    <class.name>(const <class.name>& other);
    <operator name="assignment"><class.name>& <class.name>::operator=(const <class.name>& rhs);</operator>

    <member_variable><member_variable.type> m_<member_variable>;</member_variable>
};

<operator name="ostream">std::ostream& operator<<(std::ostream& os, const <class.name>& rhs );</operator>

#endif <CLASS.NAME>_H_